3.IPC: Program handling PIPE: Write a program using pipe such that the content of an existing file to  be written to the one end of a pipe and to be read from the other end of it.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>

void main()
{
    char buf1[512], buf2[512];
    int fd, fd1, p[2], n;
    int cid;
    pipe(p);
    if ((cid = fork()) == -1)
    {
        printf("Error while forking");
        exit(0);
    }
    else if (cid > 0)
    {
        printf("\nThis is child process....\n");

        close(p[1]); //no need to write here, close write end

        printf("Reading from pipe\n");
        n = read(p[0], buf1, sizeof buf1);

        printf("Data received: %s\n", buf1);

        printf("Writing to file output.txt...\n");
        int file1 = open("output.txt", O_WRONLY | O_CREAT, 0644);
        write(file1, buf1, strlen(buf1));
    }
    else
    {
        printf("\nThis is parent process\n");

        close(p[0]); //no need to read here, close read end

        printf("Reading from file input.txt\n");
        int file2 = open("input.txt", O_RDONLY);
        read(file2, buf2, sizeof buf2);

        printf("Writing to pipe\n");
        write(p[1], buf2, strlen(buf2));
    }
}

4. IPC: Program for Client- Server Communication using TCP Socket: Write a program using TCP socket such that a client will accept a message from the user and send it to the server. The server will display the message and the IP address and port number of the client.

In client.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define CLIENT_IP "127.0.0.1"
#define CLIENT_PORT 5671
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5670
void main()
{
    struct sockaddr_in client, server;
    int sd;
    char msg[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    bzero((char *)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_port = htons(CLIENT_PORT);
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    connect(sd, (struct sockaddr *)&server, sizeof(server));
    do
    {
        printf("Enter a Message: ");
        scanf("%s", msg);
        send(sd, msg, strlen(msg) + 1, 0);
    } while (strcmp(msg, "stop"));
    close(sd);
}


In server.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5670
void main()
{
    struct sockaddr_in client, server;
    int sd, nsd, clen = sizeof(client);
    char msg[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    bind(sd, (struct sockaddr *)&server, sizeof(server));
    listen(sd, 5);
    while (1)
    {
        nsd = accept(sd, (struct sockaddr *)&client, &clen);
        do
        {
            memset(msg, 0x0, 512);
            recv(nsd, msg, 512, 0);
            printf("\nMessage received from Client: %s, Client IP: %s, Client Port: %u\n", msg, inet_ntoa(client.sin_addr), ntohs(client.sin_port));
        } while (strcmp(msg, "stop"));
        close(nsd);
    }
}

5.IPC:Program for Client- Server Communication using TCP Socket: Write a program to develop an Iterative ECHO server using TCP socket.

In client.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define CLIENT_IP "127.0.0.1"
#define CLIENT_PORT 5671
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5670
void main()
{
    struct sockaddr_in client, server;
    int sd;
    char msg[512], msg1[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    bzero((char *)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_port = htons(CLIENT_PORT);
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    connect(sd, (struct sockaddr *)&server, sizeof(server));
    do
    {
        printf("Enter a Message: ");
        scanf("%s", msg);
        send(sd, msg, strlen(msg) + 1, 0);
        memset(msg1, 0x0, 512);
        recv(sd, msg1, 512, 0);
        printf("\nMessage received from Server: %s\n", msg1);
    } while (strcmp(msg, "stop"));
    close(sd);
}


In server.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5670
void main() {
    struct sockaddr_in client, server;
    int sd, nsd, clen = sizeof(client);
    char msg[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    bind(sd, (struct sockaddr *)&server, sizeof(server));
    listen(sd, 5);
    while (1) {
        nsd = accept(sd, (struct sockaddr *)&client, &clen);
        do {
            memset(msg, 0x0, 512);
            recv(nsd, msg, 512, 0);
            send(nsd, msg, strlen(msg) + 1, 0);
        } while (strcmp(msg, "stop"));
        close(nsd);
    }
}

6.IPC: Program for Client- Server Communication using TCP Socket: Write a program to develop a Iterative Day-Time server using TCP socket.
In client.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define CLIENT_IP "127.0.0.1"
#define CLIENT_PORT 5671
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5670
void main()
{
    struct sockaddr_in client, server;
    int sd;
    char msg[512], msg1[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    bzero((char *)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_port = htons(CLIENT_PORT);
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    connect(sd, (struct sockaddr *)&server, sizeof(server));
    do
    {
        printf("Enter a Message: ");
        scanf("%s", msg);
        send(sd, msg, strlen(msg) + 1, 0);
        memset(msg1, 0x0, 512);
        recv(sd, msg1, 512, 0);
        printf("\nMessage received from Server: %s\n", msg1);
    } while (strcmp(msg, "stop"));
    close(sd);
}


In server.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <time.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5670
void main()
{
    char *ptr;
    time_t ti;
    struct sockaddr_in client, server;
    int sd, nsd, clen = sizeof(client);
    char msg[512], msg1[] = "Bad Request";
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    bind(sd, (struct sockaddr *)&server, sizeof(server));
    listen(sd, 5);
    while (1)
    {
        nsd = accept(sd, (struct sockaddr *)&client, &clen);
        do
        {
            memset(msg, 0x0, 512);
            recv(nsd, msg, 512, 0);
            if (strcmp(msg, "time") == 0)
            {
                ti = time(NULL);
                ptr = ctime(&ti);
                send(nsd, ptr, strlen(ptr) + 1, 0);
            }
            else
            {
                send(nsd, msg1, strlen(msg1) + 1, 0);
            }
        } while (strcmp(msg, "stop"));
        close(nsd);
    }
}

7. IPC:Program for Client-Server Communication using UDP Socket: Write a program to develop an Iterative ECHO server using UDP socket.
In client.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define CLIENT_IP "127.0.0.1"
#define CLIENT_PORT 6541
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 6540
void main() {
    struct sockaddr_in client, server;
    int sd, slen = sizeof(server);
    char msg[512], str[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    server.sin_port = htons(SERVER_PORT);
    bzero((char *)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    client.sin_port = htons(CLIENT_PORT);

    sd = socket(AF_INET, SOCK_DGRAM, 0);
    bind(sd, (struct sockaddr *)&client, sizeof(client));
    do {
        printf("Enter a massage: ");
        scanf("%s", str);
        sendto(sd, str, strlen(str) + 1, 0, (struct sockaddr *)&server, sizeof(server));
        memset(msg, 0x0, 512);
        recvfrom(sd, msg, 512, 0, (struct sockaddr *)&server, &slen);
        printf("\nEchoed massage : %s\n", msg);

    } while (strcmp(str, "stop"));
    close(sd);
}


In server.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 6540
void main() {
    struct sockaddr_in client, server;
    int sd, clen = sizeof(client);
    char msg[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    server.sin_port = htons(SERVER_PORT);
    sd = socket(AF_INET, SOCK_DGRAM, 0);
    bind(sd, (struct sockaddr *)&server, sizeof(server));
    while (1) {
        do {
            memset(msg, 0x0, 512);
            recvfrom(sd, msg, 512, 0, (struct sockaddr *)&client, &clen);
            sendto(sd, msg, strlen(msg) + 1, 0, (struct sockaddr *)&client, clen);
        } while (strcmp(msg, "stop"));
    }
}

8. IPC:Program for Client-Server Communication using UDP Socket: Write a program to develop a Iterative Day Time server using UDP socket.
In client.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define CLIENT_IP "127.0.0.1"
#define CLIENT_PORT 6541
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 6540
void main() {
    struct sockaddr_in client, server;
    int sd, slen = sizeof(server);
    char msg[512], str[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    server.sin_port = htons(SERVER_PORT);
    bzero((char *)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    client.sin_port = htons(CLIENT_PORT);

    sd = socket(AF_INET, SOCK_DGRAM, 0);
    bind(sd, (struct sockaddr *)&client, sizeof(client));
    do {
        printf("Enter a massage: ");
        scanf("%s", str);
        sendto(sd, str, strlen(str) + 1, 0, (struct sockaddr *)&server, sizeof(server));
        memset(msg, 0x0, 512);
        recvfrom(sd, msg, 512, 0, (struct sockaddr *)&server, &slen);
        printf("\nEchoed massage : %s\n", msg);

    } while (strcmp(str, "stop"));
    close(sd);
}


In server.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <time.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 6540
void main() {
    struct sockaddr_in client, server;
    int sd, clen = sizeof(client);
    char msg[512], str[512] = "Invalid request";
    char *ptr;
    time_t ti;
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    server.sin_port = htons(SERVER_PORT);
    sd = socket(AF_INET, SOCK_DGRAM, 0);
    bind(sd, (struct sockaddr *)&server, sizeof(server));
    while (1) {
        do {
            memset(msg, 0x0, 512);
            recvfrom(sd, msg, 512, 0, (struct sockaddr *)&client, &clen);
            if (!strcmp(msg, "time")) {
                ti = time(NULL);
                ptr = ctime(&ti);
                sendto(sd, ptr, strlen(ptr) + 1, 0, (struct sockaddr *)&client, clen);
            } else
                sendto(sd, str, strlen(str) + 1, 0, (struct sockaddr *)&client, clen);
        } while (strcmp(msg, "stop"));
    }
}

9.IPC: Program for Client- Server Communication using TCP Socket: Write a program to develop a Concurrent ECHO server using TCP socket. Use at least two client programs to implement it.
In client_1.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define CLIENT_IP "127.0.0.2"
#define CLIENT_PORT 5981
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5980
void main() {
    struct sockaddr_in client, server;
    int sd;
    char msg[512], msg1[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    bzero((char *)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_port = htons(CLIENT_PORT);
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    connect(sd, (struct sockaddr *)&server, sizeof(server));
    do {
        printf("Enter a Message: ");
        scanf("%s", msg);
        send(sd, msg, strlen(msg) + 1, 0);
        memset(msg1, 0x0, 512);
        recv(sd, msg1, 512, 0);
        printf("\nMessage received from Server: %s\n", msg1);
    } while (strcmp(msg, "stop"));
    close(sd);
}


In client_2.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#define CLIENT_IP "127.0.0.3"
#define CLIENT_PORT 5982
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5980
void main() {
    struct sockaddr_in client, server;
    int sd;
    char msg[512], msg1[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    bzero((char *)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_port = htons(CLIENT_PORT);
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    connect(sd, (struct sockaddr *)&server, sizeof(server));
    do{
        printf("Enter a Message: ");
        scanf("%s", msg);
        send(sd, msg, strlen(msg) + 1, 0);
        memset(msg1, 0x0, 512);
        recv(sd, msg1, 512, 0);
        printf("\nMessage received from Server: %s\n", msg1);
    } while (strcmp(msg, "stop"));
    close(sd);
}


In server.c:
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdlib.h>
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5980
void main() {
    struct sockaddr_in client, server;
    int pid, sd, nsd, clen = sizeof(client);
    char msg[512];
    bzero((char *)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(SERVER_PORT);
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    bind(sd, (struct sockaddr *)&server, sizeof(server));
    listen(sd, 5);
    while (1) {
        nsd = accept(sd, (struct sockaddr *)&client, &clen);
        pid = fork();
        if (pid < 0) {
            printf("Error in fork()");
            exit(0);
        } else if (pid > 0) {
            close(nsd);
        } else {
            do {
                memset(msg, 0x0, 512);
                recv(nsd, msg, 512, 0);
                send(nsd, msg, strlen(msg) + 1, 0);
            } while (strcmp(msg, "stop"));
        }
    }
}

10.Sliding Window Implementation: Write a program to implement Sliding Window protocol.
IN CLIENT:

#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define CLIENT_IP "127.0.0.1"
#define CLIENT_PORT 6542
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 6555

void main() {
    struct sockaddr_in client, server;
    int sd, n, i, j, count = 0;
    char msg[512], msg1[512], ack[512];

    bzero((char*)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    server.sin_port = htons(SERVER_PORT);

    bzero((char*)&client, sizeof(client));
    client.sin_family = AF_INET;
    client.sin_addr.s_addr = inet_addr(CLIENT_IP);
    client.sin_port = htons(CLIENT_PORT);

    sd = socket(AF_INET, SOCK_STREAM, 0);
    connect(sd, (struct sockaddr*)&server, sizeof(server));

    printf("Enter a message:");

    do {
        scanf("%s", msg);
        printf("Enter Window size:");
        scanf("%d", &n);
        i = 0;

        for (i = 0; i < strlen(msg); i++) {
            if (j < n) {
                msg1[j++] = msg[i];
            }

            if (j == n || i == strlen(msg) - 1) {
                msg1[j] = '\0';
                send(sd, msg1, strlen(msg1) + 1, 0);
                memset(ack, 0x0, 512);
                recv(sd, ack, 512, 0);
                printf("%s%d\n", ack, count++);
                j = 0;
            }
        }
    } while (strcmp(msg, "stop"));

    close(sd);
}


IN SERVER:

#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 6555

void main() {
    struct sockaddr_in client, server;
    int sd, nsd, clen = sizeof(client);
    char msg[512], ack[] = "Acknowledgement received";

    bzero((char*)&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(SERVER_IP);
    server.sin_port = htons(SERVER_PORT);

    sd = socket(AF_INET, SOCK_STREAM, 0);
    bind(sd, (struct sockaddr*)&server, sizeof(server));
    listen(sd, 5);

    while (1) {
        do {
            nsd = accept(sd, (struct sockaddr*)&client, &clen);
            memset(msg, 0x0, 512);
            recv(nsd, msg, 512, 0);
            printf("\nData receievd:%s\n", msg);
            send(nsd, ack, strlen(ack) + 1, 0);
        } while (strcmp(msg, "stop"));

        close(sd);
    }
}

EXTRA 1.Write a program to develop a Concurrent ECHO server using UDP socket. Use at least two client programs to implement it.

IN SERVER:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define PORT 9999
#define BUF_SIZE 1024

int main() {
    int sockfd;
    char buffer[BUF_SIZE];
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(PORT);

    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("UDP Echo Server running on port %d...\n", PORT);

    while (1) {
        len = sizeof(cliaddr);
        int n = recvfrom(sockfd, buffer, BUF_SIZE, 0,
                         (struct sockaddr *)&cliaddr, &len);
        if (n < 0) {
            perror("Receive error");
            continue;
        }

        buffer[n] = '\0';
        printf("Received from client: %s\n", buffer);

        // Fork to simulate concurrency
        pid_t pid = fork();
        if (pid == 0) {
            // Child process: send echo
            sendto(sockfd, buffer, strlen(buffer), 0,
                   (const struct sockaddr *)&cliaddr, len);
            close(sockfd);
            exit(0);
        }
    }

    close(sockfd);
    return 0;
}


IN CLIENT1:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>

#define SERVER_PORT 9999
#define BUF_SIZE 1024

int main() {
    int sockfd;
    char buffer[BUF_SIZE];
    struct sockaddr_in servaddr;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(SERVER_PORT);
    servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    const char *message = "Hello from Client 1";
    sendto(sockfd, message, strlen(message), 0,
           (const struct sockaddr *)&servaddr, sizeof(servaddr));

    int len = sizeof(servaddr);
    int n = recvfrom(sockfd, buffer, BUF_SIZE, 0,
                     (struct sockaddr *)&servaddr, &len);
    buffer[n] = '\0';
    printf("Client 1 received: %s\n", buffer);

    close(sockfd);
    return 0;
}


IN CLIENT2:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>

#define SERVER_PORT 9999
#define BUF_SIZE 1024

int main() {
    int sockfd;
    char buffer[BUF_SIZE];
    struct sockaddr_in servaddr;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(SERVER_PORT);
    servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    const char *message = "Hello from Client 2";
    sendto(sockfd, message, strlen(message), 0,
           (const struct sockaddr *)&servaddr, sizeof(servaddr));

    int len = sizeof(servaddr);
    int n = recvfrom(sockfd, buffer, BUF_SIZE, 0,
                     (struct sockaddr *)&servaddr, &len);
    buffer[n] = '\0';
    printf("Client 2 received: %s\n", buffer);

    close(sockfd);
    return 0;
}

EXTRA 2.Write a program using TCP socket to implement Iterative chat server.
IN SERVER:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void handle_chat(int client_sock) {
    char buffer[BUFFER_SIZE];

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);

        // Receive message from client
        int n = recv(client_sock, buffer, BUFFER_SIZE, 0);
        if (n <= 0) {
            printf("Client disconnected.\n");
            break;
        }

        printf("Client: %s", buffer);

        if (strncmp(buffer, "exit", 4) == 0) {
            printf("Client exited the chat.\n");
            break;
        }

        // Send response to client
        printf("You: ");
        memset(buffer, 0, BUFFER_SIZE);
        fgets(buffer, BUFFER_SIZE, stdin);
        send(client_sock, buffer, strlen(buffer), 0);

        if (strncmp(buffer, "exit", 4) == 0) {
            printf("Server exited the chat.\n");
            break;
        }
    }
}

int main() {
    int server_sock, client_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    // Create socket
    server_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (server_sock == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Bind
    if (bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) != 0) {
        perror("Bind failed");
        close(server_sock);
        exit(EXIT_FAILURE);
    }

    // Listen
    if (listen(server_sock, 1) != 0) {
        perror("Listen failed");
        close(server_sock);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d...\n", PORT);

    // Accept client
    client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &addr_len);
    if (client_sock < 0) {
        perror("Accept failed");
        close(server_sock);
        exit(EXIT_FAILURE);
    }

    printf("Client connected. Chat session started.\n");
    handle_chat(client_sock);

    close(client_sock);
    close(server_sock);
    return 0;
}


IN CLIENT:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define PORT 8080
#define BUFFER_SIZE 1024

void chat_with_server(int sock) {
    char buffer[BUFFER_SIZE];

    while (1) {
        printf("You: ");
        memset(buffer, 0, BUFFER_SIZE);
        fgets(buffer, BUFFER_SIZE, stdin);
        send(sock, buffer, strlen(buffer), 0);

        if (strncmp(buffer, "exit", 4) == 0) {
            printf("Client exited the chat.\n");
            break;
        }

        memset(buffer, 0, BUFFER_SIZE);
        int n = recv(sock, buffer, BUFFER_SIZE, 0);
        if (n <= 0) {
            printf("Server disconnected.\n");
            break;
        }

        printf("Server: %s", buffer);

        if (strncmp(buffer, "exit", 4) == 0) {
            printf("Server exited the chat.\n");
            break;
        }
    }
}

int main() {
    int sock;
    struct sockaddr_in server_addr;

    // Create socket
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr(SERVER_IP);

    // Connect to server
    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) != 0) {
        perror("Connection failed");
        close(sock);
        exit(EXIT_FAILURE);
    }

    printf("Connected to the server. Start chatting.\n");
    chat_with_server(sock);

    close(sock);
    return 0;
}

